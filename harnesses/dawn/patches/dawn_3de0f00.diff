diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7b0647c59e..abe0bd59c0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -128,7 +128,6 @@ function (install_if_enabled target)
     endforeach()
 endfunction()
 
-
 # Default values for the backend-enabling options
 set(ENABLE_D3D11 OFF)
 set(ENABLE_D3D12 OFF)
diff --git a/src/tint/CMakeLists.txt b/src/tint/CMakeLists.txt
index 88fa5f8236..46ad2d4e7c 100644
--- a/src/tint/CMakeLists.txt
+++ b/src/tint/CMakeLists.txt
@@ -701,6 +701,70 @@ if(TINT_BUILD_TESTS)
   add_test(NAME tint_unittests COMMAND tint_cmd_test_test_cmd)
 endif(TINT_BUILD_TESTS)
 
+if(TINT_BUILD_AFL_FUZZER)
+  add_executable(tint_afl_all_fuzzer
+    fuzzers/tint_wgsl_reader_all_writer_fuzzer.cc
+    fuzzers/tint_wgsl_reader_all_writer_fuzzer_main.cc
+    fuzzers/cli.cc
+    fuzzers/cli.h
+    fuzzers/data_builder.h
+    fuzzers/fuzzer_init.cc
+    fuzzers/fuzzer_init.h
+    fuzzers/mersenne_twister_engine.cc
+    fuzzers/mersenne_twister_engine.h
+    fuzzers/random_generator.cc
+    fuzzers/random_generator.h
+    fuzzers/random_generator_engine.cc
+    fuzzers/random_generator_engine.h
+    fuzzers/shuffle_transform.cc
+    fuzzers/shuffle_transform.h
+    fuzzers/tint_common_fuzzer.cc
+    fuzzers/tint_common_fuzzer.h
+    fuzzers/tint_reader_writer_fuzzer.h
+    fuzzers/transform_builder.h
+  )
+
+  tint_fuzz_compile_options(tint_afl_all_fuzzer)
+  tint_spvheaders_compile_options(tint_afl_all_fuzzer)
+  tint_spvtools_compile_options(tint_afl_all_fuzzer)
+  target_link_libraries(tint_afl_all_fuzzer PRIVATE tint_api)
+  target_link_libraries(tint_afl_all_fuzzer PRIVATE tint_lang_hlsl_writer_helpers)
+  target_link_libraries(tint_afl_all_fuzzer PRIVATE tint_lang_msl_writer_helpers)
+  target_link_libraries(tint_afl_all_fuzzer PRIVATE tint_lang_spirv_writer_helpers)
+endif(TINT_BUILD_AFL_FUZZER)
+
+if(TINT_BUILD_AFL_COVERAGE)
+  add_executable(tint_afl_all_coverage
+    fuzzers/tint_wgsl_reader_all_writer_fuzzer.cc
+    fuzzers/tint_wgsl_reader_all_writer_fuzzer_main.cc
+    fuzzers/cli.cc
+    fuzzers/cli.h
+    fuzzers/data_builder.h
+    fuzzers/fuzzer_init.cc
+    fuzzers/fuzzer_init.h
+    fuzzers/mersenne_twister_engine.cc
+    fuzzers/mersenne_twister_engine.h
+    fuzzers/random_generator.cc
+    fuzzers/random_generator.h
+    fuzzers/random_generator_engine.cc
+    fuzzers/random_generator_engine.h
+    fuzzers/shuffle_transform.cc
+    fuzzers/shuffle_transform.h
+    fuzzers/tint_common_fuzzer.cc
+    fuzzers/tint_common_fuzzer.h
+    fuzzers/tint_reader_writer_fuzzer.h
+    fuzzers/transform_builder.h
+  )
+
+  tint_fuzz_compile_options(tint_afl_all_coverage)
+  tint_spvheaders_compile_options(tint_afl_all_coverage)
+  tint_spvtools_compile_options(tint_afl_all_coverage)
+  target_link_libraries(tint_afl_all_coverage PRIVATE tint_api)
+  target_link_libraries(tint_afl_all_coverage PRIVATE tint_lang_hlsl_writer_helpers)
+  target_link_libraries(tint_afl_all_coverage PRIVATE tint_lang_msl_writer_helpers)
+  target_link_libraries(tint_afl_all_coverage PRIVATE tint_lang_spirv_writer_helpers)
+endif(TINT_BUILD_AFL_COVERAGE)
+
 ################################################################################
 # Target aliases
 ################################################################################
diff --git a/src/tint/fuzzers/BUILD.gn b/src/tint/fuzzers/BUILD.gn
index 3809954ce2..c41dcc4a1d 100644
--- a/src/tint/fuzzers/BUILD.gn
+++ b/src/tint/fuzzers/BUILD.gn
@@ -147,8 +147,9 @@ if (tint_has_fuzzers) {
       }
     }
 
-    fuzzer_test("tint_regex_wgsl_writer_fuzzer") {
-      sources = [ "tint_regex_fuzzer/tint_regex_wgsl_writer_fuzzer.cc" ]
+    fuzzer_test("tint_regex_all_fuzzer") {
+      sources = [ "tint_regex_fuzzer/tint_regex_wgsl_writer_fuzzer.cc",
+                  "tint_wgsl_reader_all_writer_fuzzer.cc" ]
       deps = [ "tint_regex_fuzzer:tint_regex_fuzzer" ]
       libfuzzer_options = tint_regex_fuzzer_common_libfuzzer_options
       seed_corpus = fuzzer_corpus_wgsl_dir
@@ -323,7 +324,7 @@ if (tint_has_fuzzers) {
     deps = []
 
     if (tint_build_wgsl_reader && tint_build_wgsl_writer) {
-      deps += [ ":tint_regex_wgsl_writer_fuzzer" ]
+      deps += [ ":tint_regex_all_fuzzer" ]
       if (build_with_chromium) {
         deps += [ ":tint_ast_wgsl_writer_fuzzer" ]
       }
diff --git a/src/tint/fuzzers/tint_ast_fuzzer/CMakeLists.txt b/src/tint/fuzzers/tint_ast_fuzzer/CMakeLists.txt
index d4a7050738..1ee59dc9b3 100644
--- a/src/tint/fuzzers/tint_ast_fuzzer/CMakeLists.txt
+++ b/src/tint/fuzzers/tint_ast_fuzzer/CMakeLists.txt
@@ -126,6 +126,7 @@ set(AST_FUZZER_SOURCES
         cli.h
         fuzzer.cc
         override_cli_params.h
+        ../tint_wgsl_reader_all_writer_fuzzer.cc
         ../tint_common_fuzzer.cc
         ../tint_common_fuzzer.h)
 
diff --git a/src/tint/fuzzers/tint_ast_fuzzer/fuzzer.cc b/src/tint/fuzzers/tint_ast_fuzzer/fuzzer.cc
index cdb0491c82..2701b174ca 100644
--- a/src/tint/fuzzers/tint_ast_fuzzer/fuzzer.cc
+++ b/src/tint/fuzzers/tint_ast_fuzzer/fuzzer.cc
@@ -38,6 +38,12 @@
 #include "src/tint/lang/wgsl/writer/writer.h"
 #include "testing/libfuzzer/libfuzzer_exports.h"
 
+#include "src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h"
+
+uint64_t exit_err = 0;
+uint64_t exit_suc = 0;
+time_t recent_print;
+
 namespace tint::fuzzers::ast_fuzzer {
 namespace {
 
@@ -50,6 +56,10 @@ extern "C" int LLVMFuzzerInitialize(int* argc, char*** argv) {
     // For some fuzz targets it is desirable to force the values of certain CLI
     // parameters after parsing.
     OverrideCliParams(cli_params);
+
+    timespec t;
+    clock_gettime(CLOCK_MONOTONIC, &t);
+    recent_print = t.tv_sec;
     return 0;
 }
 
@@ -103,33 +113,18 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
         return 0;
     }
 
-    struct Target {
-        FuzzingTarget fuzzing_target;
-        OutputFormat output_format;
-        const char* name;
-    };
-
-    Target targets[] = {{FuzzingTarget::kWgsl, OutputFormat::kWGSL, "WGSL"},
-                        {FuzzingTarget::kHlsl, OutputFormat::kHLSL, "HLSL"},
-                        {FuzzingTarget::kMsl, OutputFormat::kMSL, "MSL"},
-                        {FuzzingTarget::kSpv, OutputFormat::kSpv, "SPV"}};
-
-    for (auto target : targets) {
-        if ((target.fuzzing_target & cli_params.fuzzing_target) != target.fuzzing_target) {
-            continue;
-        }
-
-        TransformBuilder tb(data, size);
-        tb.AddTransform<tint::ast::transform::Robustness>();
-
-        CommonFuzzer fuzzer(InputFormat::kWGSL, target.output_format);
-        fuzzer.SetTransformManager(tb.manager(), tb.data_map());
-
-        fuzzer.Run(data, size);
-        if (fuzzer.HasErrors()) {
-            std::cout << "Fuzzing " << target.name << " produced an error" << std::endl
-                      << fuzzer.Diagnostics() << std::endl;
-        }
+    if (run(data, size, nullptr, nullptr)) {
+        exit_err++;
+    }
+    else {
+        exit_suc++;
+    }
+
+    timespec t;
+    clock_gettime(CLOCK_MONOTONIC, &t);
+    if (t.tv_sec - recent_print > 15) {
+        recent_print = t.tv_sec;
+        fprintf(stderr, "correctness: %lu suc %lu err\n", exit_suc, exit_err);
     }
 
     return 0;
diff --git a/src/tint/fuzzers/tint_ast_fuzzer/mutation_finders/replace_identifiers.cc b/src/tint/fuzzers/tint_ast_fuzzer/mutation_finders/replace_identifiers.cc
index ab7a596c81..c7316b1abe 100644
--- a/src/tint/fuzzers/tint_ast_fuzzer/mutation_finders/replace_identifiers.cc
+++ b/src/tint/fuzzers/tint_ast_fuzzer/mutation_finders/replace_identifiers.cc
@@ -57,6 +57,10 @@ MutationList MutationFinderReplaceIdentifiers::FindMutations(
         for (const auto* user : sem_variable->Users()) {
             // Get all variables that can be used to replace the `user` of
             // `sem_variable`.
+            if (!user->Stmt()) {
+                // work around a null deref
+                continue;
+            }
             auto candidate_variables =
                 util::GetAllVarsInScope(program, user->Stmt(), [user](const sem::Variable* var) {
                     return var != user->Variable() && var->Type() == user->Type();
diff --git a/src/tint/fuzzers/tint_ast_fuzzer/mutations/delete_statement.cc b/src/tint/fuzzers/tint_ast_fuzzer/mutations/delete_statement.cc
index f03ed83fa7..9a9f206321 100644
--- a/src/tint/fuzzers/tint_ast_fuzzer/mutations/delete_statement.cc
+++ b/src/tint/fuzzers/tint_ast_fuzzer/mutations/delete_statement.cc
@@ -113,6 +113,10 @@ void MutationDeleteStatement::Apply(const NodeIdMap& node_id_map,
                "Statement not found.");
         clone_context.Remove(*case_statement_list, statement_node);
     } else if (tint::Is<ast::BlockStatement>(statement_node)) {
+        if (!sem_parent->Declaration()->Is<ast::BlockStatement>()) {
+            // work around a bug where this is a CaseStatement
+            return;
+        }
         // Remove a block statement from the block that encloses it. A special case is required for
         // this, since a sem::Block has itself as its associated sem::Block, so it is necessary to
         // look at the parent to get the enclosing block.
diff --git a/src/tint/fuzzers/tint_ast_fuzzer/mutator.cc b/src/tint/fuzzers/tint_ast_fuzzer/mutator.cc
index 10be27ca7a..b99711d191 100644
--- a/src/tint/fuzzers/tint_ast_fuzzer/mutator.cc
+++ b/src/tint/fuzzers/tint_ast_fuzzer/mutator.cc
@@ -87,6 +87,13 @@ bool MaybeApplyMutation(const tint::Program& program,
         return false;
     }
 
+    // work around a crash
+    for (const ast::Node* node: program.ASTNodes().Objects()) {
+        if (node_id_map.GetId(node) == 0) {
+            return false;
+        }
+    }
+
     // The mutated `program` will be copied into the `mutated` program builder.
     tint::ProgramBuilder mutated;
     tint::program::CloneContext clone_context(&mutated, &program);
diff --git a/src/tint/fuzzers/tint_common_fuzzer.cc b/src/tint/fuzzers/tint_common_fuzzer.cc
index be3a673606..5539f77f28 100644
--- a/src/tint/fuzzers/tint_common_fuzzer.cc
+++ b/src/tint/fuzzers/tint_common_fuzzer.cc
@@ -342,9 +342,9 @@ int CommonFuzzer::Run(const uint8_t* data, size_t size) {
     return 0;
 }
 
-void CommonFuzzer::RunInspector(Program& program) {
+void CommonFuzzer::RunInspector(Program& program, tint::diag::List& diags, bool enforce_validity) {
     inspector::Inspector inspector(program);
-    diagnostics_ = program.Diagnostics();
+    diags = program.Diagnostics();
 
     if (!program.IsValid()) {
         // It's not safe to use the inspector on invalid programs.
@@ -402,4 +402,8 @@ void CommonFuzzer::RunInspector(Program& program) {
     }
 }
 
+void CommonFuzzer::RunInspector(Program& program) {
+    CommonFuzzer::RunInspector(program, diagnostics_, enforce_validity);
+}
+
 }  // namespace tint::fuzzers
diff --git a/src/tint/fuzzers/tint_common_fuzzer.h b/src/tint/fuzzers/tint_common_fuzzer.h
index 9593feac48..c1022e128c 100644
--- a/src/tint/fuzzers/tint_common_fuzzer.h
+++ b/src/tint/fuzzers/tint_common_fuzzer.h
@@ -130,6 +130,8 @@ class CommonFuzzer {
     /// @param options MSL emission options
     void SetOptionsMsl(const msl::writer::Options& options) { options_msl_ = options; }
 
+    static void RunInspector(Program& program, tint::diag::List& diags, bool enforce_validity);
+
   private:
     InputFormat input_;
     OutputFormat output_;
diff --git a/src/tint/fuzzers/tint_regex_fuzzer/CMakeLists.txt b/src/tint/fuzzers/tint_regex_fuzzer/CMakeLists.txt
index 337acdd16f..6f33d11c9a 100644
--- a/src/tint/fuzzers/tint_regex_fuzzer/CMakeLists.txt
+++ b/src/tint/fuzzers/tint_regex_fuzzer/CMakeLists.txt
@@ -55,6 +55,7 @@ set(REGEX_FUZZER_SOURCES
         cli.h
         fuzzer.cc
         override_cli_params.h
+        ../tint_wgsl_reader_all_writer_fuzzer.cc
         ../tint_common_fuzzer.cc
         ../tint_common_fuzzer.h)
 
diff --git a/src/tint/fuzzers/tint_regex_fuzzer/fuzzer.cc b/src/tint/fuzzers/tint_regex_fuzzer/fuzzer.cc
index a039cbfbbe..4856386aaa 100644
--- a/src/tint/fuzzers/tint_regex_fuzzer/fuzzer.cc
+++ b/src/tint/fuzzers/tint_regex_fuzzer/fuzzer.cc
@@ -39,6 +39,12 @@
 #include "src/tint/lang/wgsl/writer/writer.h"
 #include "testing/libfuzzer/libfuzzer_exports.h"
 
+#include "src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h"
+
+uint64_t exit_err = 0;
+uint64_t exit_suc = 0;
+time_t recent_print;
+
 namespace tint::fuzzers::regex_fuzzer {
 namespace {
 
@@ -65,6 +71,10 @@ extern "C" int LLVMFuzzerInitialize(int* argc, char*** argv) {
     // For some fuzz targets it is desirable to force the values of certain CLI
     // parameters after parsing.
     OverrideCliParams(cli_params);
+
+    timespec t;
+    clock_gettime(CLOCK_MONOTONIC, &t);
+    recent_print = t.tv_sec;
     return 0;
 }
 
@@ -159,29 +169,18 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
         return 0;
     }
 
-    struct Target {
-        FuzzingTarget fuzzing_target;
-        OutputFormat output_format;
-        const char* name;
-    };
-
-    Target targets[] = {{FuzzingTarget::kWgsl, OutputFormat::kWGSL, "WGSL"},
-                        {FuzzingTarget::kHlsl, OutputFormat::kHLSL, "HLSL"},
-                        {FuzzingTarget::kMsl, OutputFormat::kMSL, "MSL"},
-                        {FuzzingTarget::kSpv, OutputFormat::kSpv, "SPV"}};
-
-    for (auto target : targets) {
-        if ((target.fuzzing_target & cli_params.fuzzing_target) != target.fuzzing_target) {
-            continue;
-        }
-
-        TransformBuilder tb(data, size);
-        tb.AddTransform<tint::ast::transform::Robustness>();
-
-        CommonFuzzer fuzzer(InputFormat::kWGSL, target.output_format);
-        fuzzer.SetTransformManager(tb.manager(), tb.data_map());
+    if (run(data, size, nullptr, nullptr)) {
+        exit_err++;
+    }
+    else {
+        exit_suc++;
+    }
 
-        fuzzer.Run(data, size);
+    timespec t;
+    clock_gettime(CLOCK_MONOTONIC, &t);
+    if (t.tv_sec - recent_print > 15) {
+        recent_print = t.tv_sec;
+        fprintf(stderr, "correctness: %lu suc %lu err\n", exit_suc, exit_err);
     }
 
     return 0;
diff --git a/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.cc b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.cc
new file mode 100644
index 0000000000..c9c85d6d95
--- /dev/null
+++ b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.cc
@@ -0,0 +1,280 @@
+// Copyright 2021 The Dawn & Tint Authors
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice, this
+//    list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its
+//    contributors may be used to endorse or promote products derived from
+//    this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+#include "src/tint/fuzzers/fuzzer_init.h"
+#include "src/tint/fuzzers/random_generator.h"
+#include "src/tint/fuzzers/tint_common_fuzzer.h"
+#include "src/tint/fuzzers/transform_builder.h"
+
+#include "src/tint/api/common/binding_point.h"
+#include "src/tint/lang/core/type/external_texture.h"
+#include "src/tint/lang/wgsl/ast/module.h"
+#include "src/tint/lang/wgsl/helpers/apply_substitute_overrides.h"
+#include "src/tint/lang/wgsl/helpers/flatten_bindings.h"
+#include "src/tint/lang/wgsl/program/program.h"
+#include "src/tint/lang/wgsl/sem/variable.h"
+#include "src/tint/utils/diagnostic/formatter.h"
+#include "src/tint/utils/text/styled_text_printer.h"
+#include "src/tint/utils/math/hash.h"
+
+#include "src/tint/lang/spirv/writer/helpers/generate_bindings.h"
+#include "src/tint/lang/msl/writer/helpers/generate_bindings.h"
+#include "src/tint/lang/spirv/writer/helpers/ast_generate_bindings.h"
+#include "spirv-tools/libspirv.hpp"
+
+#include "src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h"
+
+#include <dlfcn.h>
+#include <codecvt>
+#include <sys/shm.h>
+
+#include <unistd.h>
+#include <iostream>
+
+IDxcCompiler3* mDxcCompiler = nullptr;
+
+using namespace tint::fuzzers;
+
+bool SPIRVToolsValidationCheck(const tint::Program& program, const std::vector<uint32_t>& spirv) {
+    spvtools::SpirvTools tools(SPV_ENV_VULKAN_1_1);
+    tools.SetMessageConsumer(
+        [](spv_message_level_t, const char*, const spv_position_t& pos, const char* msg) {
+                std::cerr << "Validation error: " << (pos.line + 1) << ":" << (pos.column + 1) << ": " << msg << "\n";
+        });
+    return tools.Validate(spirv.data(), spirv.size(), spvtools::ValidatorOptions());
+}
+
+[[noreturn]] void TintInternalCompilerErrorReporter(const tint::InternalCompilerError& err) {
+    std::cerr << err.Error() << std::endl;
+    __builtin_trap();
+}
+
+int run(const uint8_t* data, size_t size,
+        tint::ast::transform::Manager* transform_manager_,
+        tint::ast::transform::DataMap* transform_inputs_) {
+    tint::Initialize();
+    tint::SetInternalCompilerErrorReporter(&TintInternalCompilerErrorReporter);
+
+    tint::Program program;
+    assert((!transform_manager_ || transform_inputs_) && "DataMap must be !nullptr if Manager !nullptr");
+
+    std::unique_ptr<tint::Source::File> file_;
+#if TINT_BUILD_WGSL_READER
+     // Clear any existing diagnostics, as these will hold pointers to file_,
+     // which we are about to release.
+     // diagnostics_ = {};
+     std::string str(reinterpret_cast<const char*>(data), size);
+     file_ = std::make_unique<tint::Source::File>("test.wgsl", str);
+     program = tint::wgsl::reader::Parse(file_.get());
+#else
+#error "must have wgsl reader"
+#endif  // TINT_BUILD_WGSL_READER
+
+    if (!program.IsValid()) {
+        //std::cerr << program.Diagnostics() << std::endl;
+        return -1;
+    }
+
+    // Helper that returns `true` if the program uses the given extension.
+    auto uses_extension = [&program](tint::wgsl::Extension extension) {
+        for (auto* enable : program.AST().Enables()) {
+            if (enable->HasExtension(extension)) {
+                return true;
+            }
+        }
+        return false;
+    };
+
+    tint::diag::List diags;
+    CommonFuzzer::RunInspector(program, diags, true);
+
+    auto validate_program = [&](auto& out) {
+        if (!out.IsValid()) {
+            // Transforms can produce error messages for bad input.
+            // Catch ICEs and errors from non transform systems.
+            for (const auto& diag : out.Diagnostics()) {
+                if (diag.severity > tint::diag::Severity::Error ||
+                    diag.system != tint::diag::System::Transform) {
+                    std::cerr << "Fuzzing detected valid input program being "
+                                 "transformed into an invalid output program" << std::endl;
+                    __builtin_trap();
+                }
+            }
+            return 0;
+        }
+
+        program = std::move(out);
+        CommonFuzzer::RunInspector(program, diags, true);
+        return 1;
+    };
+
+    if (transform_manager_) {
+        tint::ast::transform::DataMap outputs;
+        auto out = transform_manager_->Run(program, *transform_inputs_, outputs);
+        if (!validate_program(out)) {  // Will move: program <- out on success
+            return -2;
+        }
+    }
+
+    // Run SubstituteOverride if required
+    if (auto transformed = tint::wgsl::ApplySubstituteOverrides(program)) {
+        program = std::move(*transformed);
+        if (!program.IsValid()) {
+            return -3;
+        }
+    }
+
+#if TINT_BUILD_SPV_WRITER
+    do {
+        tint::spirv::writer::Options options_spirv_;
+        options_spirv_.bindings = tint::spirv::writer::GenerateBindings(program);
+
+        auto ir = tint::wgsl::reader::ProgramToLoweredIR(program);
+        if (ir != tint::Success) {
+            return -1;
+        }
+
+        // Skip fuzzing the SPIR-V writer when the `clamp_frag_depth` option is used with a
+        // module that already contains push constants.
+        if (uses_extension(tint::wgsl::Extension::kChromiumExperimentalPushConstant) &&
+            options_spirv_.clamp_frag_depth) {
+            break;
+        }
+
+        auto result = tint::spirv::writer::Generate(ir.Get(), options_spirv_);
+        if (result == tint::Success) {
+            std::vector<uint32_t> generated_spirv_ = std::move(result->spirv);
+
+            if (!SPIRVToolsValidationCheck(program, generated_spirv_)) {
+                std::cerr << "Fuzzing detected invalid spirv being emitted by Tint" << std::endl;
+                __builtin_trap();
+            }
+        }
+    } while(0);
+#else
+#error "must have spv writer"
+#endif  // TINT_BUILD_SPV_WRITER
+
+#if TINT_BUILD_HLSL_WRITER
+    tint::hlsl::writer::Options options_hlsl_;
+    auto result = tint::hlsl::writer::Generate(program, options_hlsl_);
+    if (mDxcCompiler && result == tint::Success) {
+        std::string generated_hlsl = std::move(result->hlsl);
+        for (auto const& [entryPoint, stage]: result->entry_points) {
+            std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
+            std::wstring entryPointW = converter.from_bytes(entryPoint);
+
+            std::vector<const wchar_t*> arguments;
+            arguments.push_back(L"-T");
+            switch (stage) {
+                //case tint::ast::PipelineStage::kVertex: arguments.push_back(L"vs_5_0"); break;
+                //case tint::ast::PipelineStage::kFragment: arguments.push_back(L"ps_5_0"); break;
+                //case tint::ast::PipelineStage::kCompute: arguments.push_back(L"cs_5_0"); break;
+
+                case tint::ast::PipelineStage::kVertex: arguments.push_back(L"vs_6_6"); break;
+                case tint::ast::PipelineStage::kFragment: arguments.push_back(L"ps_6_6"); break;
+                case tint::ast::PipelineStage::kCompute: arguments.push_back(L"cs_6_6"); break;
+                default: continue;
+            }
+
+            arguments.push_back(L"-E");
+            arguments.push_back(entryPointW.data());
+            arguments.push_back(L"-opt-disable");
+            arguments.push_back(L"structurize-loop-exits-for-unroll");
+            arguments.push_back(L"/Gis");
+            arguments.push_back(L"/Zpr");
+            arguments.push_back(L"/enable-16bit-types");
+            arguments.push_back(L"-HV");
+            arguments.push_back(L"2018");
+
+            DxcBuffer dxcBuffer;
+            dxcBuffer.Ptr = generated_hlsl.c_str();
+            dxcBuffer.Size = generated_hlsl.length();
+            dxcBuffer.Encoding = DXC_CP_UTF8;
+
+            IUnknown* pResult;
+            mDxcCompiler->Compile(&dxcBuffer, arguments.data(), arguments.size(),
+                                  nullptr, __uuidof(IDxcResult), (void**)&pResult);
+            pResult->Release();
+        }
+    }
+#else
+#error "must have hlsl writer"
+#endif  // TINT_BUILD_HLSL_WRITER
+
+#if TINT_BUILD_MSL_WRITER
+    do {
+        const tint::Program* input_program = &program;
+        auto flattened = tint::wgsl::FlattenBindings(program);
+        if (flattened) {
+            input_program = &*flattened;
+        }
+        tint::msl::writer::Options options_msl_;
+        options_msl_.bindings = tint::msl::writer::GenerateBindings(*input_program);
+        options_msl_.disable_robustness = true;
+        options_msl_.disable_workgroup_init = false;
+        options_msl_.array_length_from_uniform.ubo_binding = 30;
+
+        // For the generates which use MultiPlanar, make sure the configuration options are provided so
+        // that the transformer will execute.
+        // Gather external texture binding information
+        // Collect next valid binding number per group
+        std::unordered_map<uint32_t, uint32_t> group_to_next_binding_number;
+        std::vector<tint::BindingPoint> ext_tex_bps;
+        for (auto* var : program.AST().GlobalVariables()) {
+            if (auto* sem_var = program.Sem().Get(var)->As<tint::sem::GlobalVariable>()) {
+                if (auto bp = sem_var->Attributes().binding_point) {
+                    auto& n = group_to_next_binding_number[bp->group];
+                    n = std::max(n, bp->binding + 1);
+
+                    if (sem_var->Type()->UnwrapRef()->Is<tint::core::type::ExternalTexture>()) {
+                        ext_tex_bps.emplace_back(*bp);
+                    }
+                }
+            }
+        }
+
+        (void)tint::msl::writer::Generate(*input_program, options_msl_);
+
+        // Not production ready:
+        //auto ir = tint::wgsl::reader::ProgramToLoweredIR(program);
+        //if (ir != tint::Success) {
+        //    return -1;
+        //}
+        //(void)tint::msl::writer::Generate(ir.Get(), options_msl_);
+    } while(0);
+#else
+#error "must have msl writer"
+#endif  // TINT_BUILD_MSL_WRITER
+
+    return 0;
+}
+
+void run_set_exit(const uint8_t* data, size_t size, uint8_t* exit_code) {
+    exit_code[0] = run(data, size, nullptr, nullptr);
+    exit_code[1] = 1;
+}
diff --git a/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h
new file mode 100644
index 0000000000..46436232f6
--- /dev/null
+++ b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h
@@ -0,0 +1,113 @@
+#define DXC_CP_UTF8 65001
+typedef struct _GUID {
+  uint32_t Data1;
+  uint16_t Data2;
+  uint16_t Data3;
+  uint8_t Data4[8];
+} GUID;
+typedef signed int HRESULT;
+typedef unsigned long ULONG;
+typedef GUID CLSID;
+typedef GUID IID;
+typedef const IID &REFIID;
+typedef const GUID &REFCLSID;
+typedef void *LPVOID;
+typedef const wchar_t *LPCWSTR;
+typedef uint32_t UINT32;
+typedef unsigned int UINT;
+typedef size_t SIZE_T;
+typedef const void *LPCVOID;
+
+template <typename interface> inline GUID __emulated_uuidof();
+#define __uuidof(T) __emulated_uuidof<typename std::decay<T>::type>()
+#define IID_PPV_ARGS(ppType)                                                  \
+  __uuidof(decltype(**(ppType))), reinterpret_cast<void **>(ppType)
+
+typedef HRESULT(*DxcCreateInstanceProc)(REFCLSID rclsid,
+                                        REFIID riid,
+                                        LPVOID *ppv);
+const CLSID CLSID_DxcCompiler = {
+    0x73e22d93,
+    0xe6ce,
+    0x47f3,
+    {0xb5, 0xbf, 0xf0, 0x66, 0x4f, 0x39, 0xc1, 0xb0}};
+
+constexpr uint8_t nybble_from_hex(char c) {
+  return ((c >= '0' && c <= '9')
+              ? (c - '0')
+              : ((c >= 'a' && c <= 'f')
+                     ? (c - 'a' + 10)
+                     : ((c >= 'A' && c <= 'F') ? (c - 'A' + 10)
+                                               : /* Should be an error */ -1)));
+}
+
+constexpr uint8_t byte_from_hexstr(const char str[2]) {
+  return nybble_from_hex(str[0]) << 4 | nybble_from_hex(str[1]);
+}
+
+constexpr GUID guid_from_string(const char str[37]) {
+  return GUID{static_cast<uint32_t>(byte_from_hexstr(str)) << 24 |
+                  static_cast<uint32_t>(byte_from_hexstr(str + 2)) << 16 |
+                  static_cast<uint32_t>(byte_from_hexstr(str + 4)) << 8 |
+                  byte_from_hexstr(str + 6),
+              static_cast<uint16_t>(
+                  static_cast<uint16_t>(byte_from_hexstr(str + 9)) << 8 |
+                  byte_from_hexstr(str + 11)),
+              static_cast<uint16_t>(
+                  static_cast<uint16_t>(byte_from_hexstr(str + 14)) << 8 |
+                  byte_from_hexstr(str + 16)),
+              {byte_from_hexstr(str + 19), byte_from_hexstr(str + 21),
+               byte_from_hexstr(str + 24), byte_from_hexstr(str + 26),
+               byte_from_hexstr(str + 28), byte_from_hexstr(str + 30),
+               byte_from_hexstr(str + 32), byte_from_hexstr(str + 34)}};
+}
+
+#define CROSS_PLATFORM_UUIDOF(interface, spec)                                 \
+  struct interface;                                                            \
+  template <> inline GUID __emulated_uuidof<interface>() {                     \
+    static const IID _IID = guid_from_string(spec);                            \
+    return _IID;                                                               \
+  }
+
+CROSS_PLATFORM_UUIDOF(IDxcCompiler3, "228B4687-5A6A-4730-900C-9702B2203F54")
+CROSS_PLATFORM_UUIDOF(IDxcResult, "58346CDA-DDE7-4497-9461-6F87AF5E0659")
+CROSS_PLATFORM_UUIDOF(IUnknown, "00000000-0000-0000-C000-000000000046")
+struct IUnknown {
+  IUnknown(){}
+  virtual HRESULT QueryInterface(REFIID riid, void **ppvObject) = 0;
+  virtual ULONG AddRef() = 0;
+  virtual ULONG Release() = 0;
+  template <class Q> HRESULT QueryInterface(Q **pp) {
+    return QueryInterface(__uuidof(Q), (void **)pp);
+  }
+};
+
+typedef struct DxcBuffer {
+  LPCVOID Ptr;
+  SIZE_T Size;
+  UINT Encoding;
+} DxcText;
+
+struct IDxcCompiler3 : public IUnknown {
+  virtual HRESULT Compile(
+      const DxcBuffer *pSource, ///< Source text to compile.
+      LPCWSTR *pArguments, ///< Array of pointers to arguments.
+      UINT32 argCount,    ///< Number of arguments.
+      void *pIncludeHandler,  ///< user-provided interface to handle include
+      REFIID riid,      ///< Interface ID for the result.
+      LPVOID *ppResult ///< IDxcResult: status, buffer, and errors.
+      ) = 0;
+
+  virtual HRESULT Disassemble(
+      const DxcBuffer *pObject,     ///< Program to disassemble: dxil container or bitcode.
+      REFIID riid, ///< Interface ID for the result.
+      LPVOID *ppResult ///< IDxcResult: status, disassembly text, and errors.
+      ) = 0;
+};
+
+#define LIBAFL_EXIT_ID "__LIBAFL_EXIT_ID"
+
+void run_set_exit(const uint8_t* data, size_t size, uint8_t* exit_code);
+int run(const uint8_t* data, size_t size,
+        tint::ast::transform::Manager* transform_manager_,
+        tint::ast::transform::DataMap* transform_inputs_);
diff --git a/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer_main.cc b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer_main.cc
new file mode 100644
index 0000000000..2ccb967fbc
--- /dev/null
+++ b/src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer_main.cc
@@ -0,0 +1,129 @@
+// Copyright 2021 The Dawn & Tint Authors
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+// 1. Redistributions of source code must retain the above copyright notice, this
+//    list of conditions and the following disclaimer.
+//
+// 2. Redistributions in binary form must reproduce the above copyright notice,
+//    this list of conditions and the following disclaimer in the documentation
+//    and/or other materials provided with the distribution.
+//
+// 3. Neither the name of the copyright holder nor the names of its
+//    contributors may be used to endorse or promote products derived from
+//    this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+#include "src/tint/fuzzers/fuzzer_init.h"
+#include "src/tint/fuzzers/random_generator.h"
+#include "src/tint/fuzzers/tint_common_fuzzer.h"
+#include "src/tint/fuzzers/transform_builder.h"
+
+#include "src/tint/api/common/binding_point.h"
+#include "src/tint/lang/core/type/external_texture.h"
+#include "src/tint/lang/wgsl/ast/module.h"
+#include "src/tint/lang/wgsl/helpers/apply_substitute_overrides.h"
+#include "src/tint/lang/wgsl/helpers/flatten_bindings.h"
+#include "src/tint/lang/wgsl/program/program.h"
+#include "src/tint/lang/wgsl/sem/variable.h"
+#include "src/tint/utils/diagnostic/formatter.h"
+#include "src/tint/utils/text/styled_text_printer.h"
+#include "src/tint/utils/math/hash.h"
+
+#include "src/tint/lang/spirv/writer/helpers/generate_bindings.h"
+#include "src/tint/lang/msl/writer/helpers/generate_bindings.h"
+#include "src/tint/lang/spirv/writer/helpers/ast_generate_bindings.h"
+#include "spirv-tools/libspirv.hpp"
+
+#include "src/tint/fuzzers/tint_wgsl_reader_all_writer_fuzzer.h"
+
+#include <dlfcn.h>
+#include <codecvt>
+#include <sys/shm.h>
+
+#include <unistd.h>
+#include <iostream>
+
+
+#ifdef __AFL_COMPILER
+__AFL_FUZZ_INIT();
+#endif
+
+extern IDxcCompiler3* mDxcCompiler;
+
+using namespace tint::fuzzers;
+
+int main(int argc, char** argv) {
+
+#ifdef __AFL_COMPILER
+    void* dxcomplib = dlopen("libdxcompiler.so", RTLD_NOW | RTLD_GLOBAL);
+    uint8_t* exit_code = NULL;
+    if (const char* shmid_str = getenv(LIBAFL_EXIT_ID)) {
+        int shmid = atoi(shmid_str);
+        void* addr = shmat(shmid, NULL, 0);
+        if (addr == (void *) -1) {
+          fprintf(stderr, "shmat failed\n");
+          exit(-1);
+        }
+        else {
+          exit_code = (uint8_t*)addr;
+        }
+    }
+    else {
+      fprintf(stderr, "env LIBAFL_EXIT_ID not set\n");
+      exit(-1);
+    }
+#else
+    void* dxcomplib = dlopen("libdxcompiler.so", RTLD_NOW | RTLD_GLOBAL);
+    uint8_t exit_code_dummy[2];
+    uint8_t* exit_code = exit_code_dummy;
+#endif
+    fprintf(stderr, "dxcomplib: %p\n", dxcomplib);
+    if (dxcomplib) {
+        DxcCreateInstanceProc dxcCreateInstance = \
+            (DxcCreateInstanceProc)dlsym(dxcomplib, "DxcCreateInstance");
+        fprintf(stderr, "dxcCreateInstance: %p\n", dxcCreateInstance);
+        dxcCreateInstance(CLSID_DxcCompiler, IID_PPV_ARGS(&mDxcCompiler));
+    }
+
+#ifdef __AFL_HAVE_MANUAL_CONTROL
+    __AFL_INIT();
+#endif
+
+#ifdef __AFL_COMPILER
+    unsigned char *buf = __AFL_FUZZ_TESTCASE_BUF;
+    while (__AFL_LOOP(10000)) {
+        size_t len = (size_t)__AFL_FUZZ_TESTCASE_LEN;
+#else
+    if (argc != 2) {
+        return -1;
+    }
+    FILE* fp = fopen(argv[1], "r");
+    fseek(fp, 0, SEEK_END);
+    size_t len = (size_t)ftell(fp);
+    fseek(fp, 0, SEEK_SET);
+    unsigned char *buf = (unsigned char*)malloc(len);
+    fread(buf, len, 1, fp);
+    {
+#endif
+        run_set_exit(buf, len, exit_code);
+        fprintf(stderr, "result %d\n", *exit_code);
+    }
+
+#ifndef __AFL_COMPILER
+    free(buf);
+#endif
+
+    return 0;
+}
